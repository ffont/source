#!/usr/bin/env python3

import asyncio
import argparse
import json
import logging
import os
import requests
import subprocess
import sys
import time
import urllib

from bs4 import BeautifulSoup

try:
    from elkpy import sushicontroller as sc
    from elkpy import sushiprocessor as sp
except ImportError:
    # Not running in ELK platform, no problem as ELK-specific code won't be run
    pass

try:
    from elk_ui import ElkUIController
except ModuleNotFoundError:
    # Not running in ELK platform, no problem as ELK-specific code won't be run
    pass

from flask import Flask, render_template, request, redirect, url_for, Response
from oscpy.client import OSCClient
import threading

if sys.platform == "linux" or sys.platform == "linux2":
    platform = "ELK"
else:
    platform = "desktop"

# Configure Flask logging to only show error messages
disable_flask_logging = False
if disable_flask_logging:
    log = logging.getLogger('werkzeug')
    log.setLevel(logging.ERROR)

BUTTON_MIDI_NOTES = [48, 60, 62, 64, 65, 67, 69, 71, 72]  # C3 + C scale from C4 to C5

elk_bridge_refresh_fps = 20
system_stats_refresh_fps = 0.2

plugin_state = "No sate"
plguin_state_xml = None
time_post_state_received = None
connection_with_plugin_ok = False
old_state_seconds_threshold = 5

system_stats = {}

system_stats_thread = None
elk_bridge_thread = None

http_server = Flask(__name__, template_folder='/udata/source/app/' if platform == "ELK" else '../SourceSampler/Resources/')
osc_client = None
elk_bridge = None


# --- Utils ------------------------------------------------------------------------


def get_status_output(command):
    return os.popen(command).read()[:-1]  # Remove last char which is always \n


def collect_system_stats():
    global system_stats

    if platform == "ELK":

        # Get system stats like cpu usage, temperature, etc.
        try:
            system_stats['temp'] = get_status_output("sudo vcgencmd measure_temp").replace('temp=', '').replace("'C", '')
            system_stats['cpu'] = get_status_output("grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage \"%\"}'")[0:4]
            system_stats['mem'] = get_status_output("free | grep Mem | awk '{print $3/$2 * 100.0}'")[0:4]
            system_stats['msw'] = "CPU  PID    MSW        CSW        XSC        PF    STAT       %CPU  NAME\n" + get_status_output("more /proc/xenomai/sched/stat | grep sushi_b64")
            system_stats['n_sushi_proc'] = get_status_output("ps -e | grep sushi | wc -l")
            connmanctl_services_output = get_status_output("sudo connmanctl services")
            wifi_is_connected = '*AO' in connmanctl_services_output
            if wifi_is_connected:
                system_stats['network_ssid'] = connmanctl_services_output.split('*AO ')[1].split(' ')[0]
            else:
                system_stats['network_ssid'] = 'No network'
        except:
            system_stats = {}


def run_collect_system_stats_loop():
    print('* Starting system stats loop')
    while True:
        time.sleep(1.0/system_stats_refresh_fps)
        collect_system_stats()


# --- ELK Bridge ------------------------------------------------------------------------

class ElkBridge(object):

    buttons_state = {}
    time_buttons_pressed = {}
    buttons_sent_note_on = {}
    selected_sound_idx = None
    display_contents_for_simulator = "No contents"
    ui = None
    sushi = None

    def __init__(self):

        sushi_initialized = False
        while not sushi_initialized:
            try:
                self.sushi = sc.SushiController()
                sushi_initialized = True
                print("Initialized SushiController")
            except Exception as e:
                print('ERROR initializing SushiController: {0}'.format(e))
                if platform == "ELK":
                    time.sleep(1)
                else:
                    break  # break while because this will never succeed
                

        elkui_initialized = False
        while not elkui_initialized:
            try:
                self.ui = ElkUIController(self.handle_faders,
                                          self.handle_buttons,
                                          self.handle_encoder_button,
                                          self.handle_encoder)
                elkui_initialized = True
                print("Initialized ElkUIController")
            except Exception as e:
                print('ERROR initializing ElkUIController: {0}'.format(e))
                if platform == "ELK":
                    time.sleep(1)
                else:
                    break  # break while because this will never succeed
        self._refresh_display(0)

    def handle_faders(self, fader_idx, val):

        if self.selected_sound_idx is not None:
            if (fader_idx == 0):
                osc_client.send_message("/set_sound_parameter", [self.selected_sound_idx, "pitch", 36.0 * (val - 0.5)])
            elif (fader_idx == 1):
                osc_client.send_message("/set_sound_parameter", [self.selected_sound_idx, "filterCutoff", 10 + 20000 * val])
            elif (fader_idx == 2):
                osc_client.send_message("/set_sound_parameter_int", [self.selected_sound_idx, "launchMode", int(round(4 * val))])
            elif (fader_idx == 3):
                osc_client.send_message("/set_sound_parameter", [self.selected_sound_idx, "gain", 12.0 * 2.0 * (val - 0.5)])

    def handle_buttons(self, button_idx, val):
        stored_val = self.buttons_state.get(button_idx, 0)
        current_val = int(val)

        if stored_val == current_val:
            # State did not change, "nothing" happened. We should not reach here...
            pass
        elif stored_val == 0 and current_val == 1:
            # Button was pressed

            # If button was also pressed not long ago, consider a "double press" and trigger a sound
            if time.time() - self.time_buttons_pressed.get(button_idx, 0) < 0.5:
                #if self.sushi is not None:
                    #self.sushi.keyboard.send_note_on(0, 0, BUTTON_MIDI_NOTES[button_idx], 1.0)
                sound_idx = button_idx - 1   # from 0-7
                if self.buttons_state.get(0, 0) == 1:  # if "shift" button is pressed, sound index is form 8-15
                    sound_idx += 8
                if (sound_idx > -1):
                    osc_client.send_message("/play_sound", [sound_idx])
                    self.buttons_sent_note_on[button_idx] = True

            # Reset time button was pressed
            self.time_buttons_pressed[button_idx] = None

            # Store time when button was pressed
            self.time_buttons_pressed[button_idx] = time.time()

            # Select corresponding sound
            if button_idx > 0:
                sound_idx = button_idx - 1   # from 0-7
                if self.buttons_state.get(0, 0) == 1:  # if "shift" button is pressed, sound index is form 8-15
                    sound_idx += 8
                self.selected_sound_idx = sound_idx  # Select sound

        elif stored_val == 1 and current_val == 0:
            # Button was released

            # If note on was triggered, trigger note off now
            if self.buttons_sent_note_on.get(button_idx, False):
                #if self.sushi is not None:
                #    self.sushi.keyboard.send_note_on(0, 0, BUTTON_MIDI_NOTES[button_idx], 0.0)
                sound_idx = button_idx - 1   # from 0-7
                if self.buttons_state.get(0, 0) == 1:  # if "shift" button is pressed, sound index is form 8-15
                    sound_idx += 8
                if (sound_idx > -1):
                    osc_client.send_message("/stop_sound", [sound_idx])
                    self.buttons_sent_note_on[button_idx] = False

            # Unselect current sound
            self.selected_sound_idx = None  # Unselect sound

        self.buttons_state[button_idx] = current_val
        if self.ui is not None:
            self.ui.set_led(button_idx, val)

    def handle_encoder_button(self, val):
        print('Encoder button pressed: {0}'.format(val))

    def handle_encoder(self, direction):
        print('Encoder rotated: {0}'.format(direction))

        global osc_client
        global plguin_state_xml

        preset_state = plguin_state_xml.find_all("SourcePresetState".lower())[0]
        preset_number = int(preset_state.get("presetNumber".lower(), "-1"))
        new_preset_number = preset_number + direction
        if new_preset_number < 0:
            new_preset_number = 0
        if new_preset_number != preset_number:
            print('Loading new preset')
            osc_client.send_message("/load_preset", [new_preset_number])

    def run(self):
        if self.ui is not None:
            self.ui.run()

        # Start loop to call refresh for the display
        counter = 0
        while True:
            time.sleep(1.0/elk_bridge_refresh_fps)

            counter += 1
            if counter % 3 == 0:
                self._refresh_display(counter)  # At 1/3 of the rate of elk_bridge_refresh_fps, also update the full contents of the display

            if self.ui is not None:
                self.ui.refresh()

    def _refresh_display(self, counter):
        global connection_with_plugin_ok
        global time_post_state_received
        global plguin_state_xml

        # Before setting new display lines, pre-compute some variables form the state

        # Check plugin connection status
        if time_post_state_received is not None and time.time() - time_post_state_received < 0.5:
            shoudl_state_received_mark = True
        else:
            shoudl_state_received_mark = None
        if time_post_state_received is not None and time.time() - time_post_state_received > old_state_seconds_threshold:
            if connection_with_plugin_ok == True:
                connection_with_plugin_ok = False
                print('* Plugin disconnected')

        # Check if a sound is selected to decide which info to show
        display_lines = ["R&A SOURCE " + ["|", "/", "-", "\\"][counter % 4] + (" *" if shoudl_state_received_mark else "")]

        if self.selected_sound_idx is not None:
            sound_name = ""
            sound_pitch = -1
            sound_cutoff = -1
            sound_launch_mode = -1
            sound_gain = -1
            if plguin_state_xml is not None:
                preset_state = plguin_state_xml.find_all("SourcePresetState".lower())[0]
                sounds_info = preset_state.find_all("soundsInfo".lower())[0].find_all("soundInfo".lower())
                if self.selected_sound_idx < len(sounds_info):
                    sound_info = sounds_info[self.selected_sound_idx]
                    sound_name = sound_info.get('soundname', '-')
                    for parameter in sound_info.find_all('samplersoundparameter'):
                        value = parameter.get('parameter_value', '')
                        if parameter.get('parameter_name', '') == 'pitch':
                            sound_pitch = value
                        elif parameter.get('parameter_name', '') == 'filterCutoff':
                            sound_cutoff = value
                        elif parameter.get('parameter_name', '') == 'launchMode':
                            sound_launch_mode = ['Gate', 'Loop', 'Ping-pong', 'Trigger', 'Freeze'][int(value)]
                        elif parameter.get('parameter_name', '') == 'gain':
                            sound_gain = value
            display_lines += [
                "SOUND {0}: {1}".format(self.selected_sound_idx, sound_name),
                "Pitch: {0:.2f}".format(float(sound_pitch)),
                "Cutoff: {0:.2f} Hz".format(float(sound_cutoff)),
                "Launch mode: {0}".format(sound_launch_mode),
                "Gain: {0:.2f} dB".format(float(sound_gain)),
            ]
        else:
            # Get some properties from plugin state
            num_active_voices = 0
            preset_name = ""
            preset_number = 0
            num_loaded_sounds = 0
            if plguin_state_xml is not None:
                volatile_state = plguin_state_xml.find_all("VolatileState".lower())[0]
                num_active_voices = sum([int(element) for element in volatile_state.get('voiceActivations'.lower(), '').split(',') if element])
                preset_state = plguin_state_xml.find_all("SourcePresetState".lower())[0]
                preset_number = int(preset_state.get("presetNumber".lower(), "-1"))
                preset_name = preset_state.get("presetName".lower(), "no name")
                num_loaded_sounds = len(preset_state.find_all("soundsInfo".lower())[0].find_all("soundInfo".lower()))

            # Update lines of text for the display (set_display_lines will trigger display update)
            display_lines += [
                "{0}ºC|c:{1}|m:{2}".format(system_stats.get("temp", "-"), system_stats.get("cpu", "-"), system_stats.get("mem", "-")),
                'Network: ' + system_stats.get("network_ssid", "-"),
                "{0}".format("Plugin online" if connection_with_plugin_ok else "Plugin offline"),
                "{0}: {1} ({2} sounds)".format(preset_number, preset_name, num_loaded_sounds),
                "",
            ]
        
        # Send new lines to UI
        if self.ui is not None:
            self.ui.set_display_lines(display_lines)

        # Also save the lines in internal state
        self.display_contents_for_simulator = display_lines


def run_elk_bridge_loop():
    global elk_bridge
    print('* Starting ElkBridge')
    elk_bridge = ElkBridge()
    elk_bridge.run()


# --- Sound downloader ------------------------------------------------------------------------

class SoundDownloader:
    def __init__(self, url, outfile):
        self.old_percent = 0
        self.url = url
        self.outfile = outfile

    def download_progress_hook(self, count, blockSize, totalSize):
        percent = int(count * blockSize * 100 / totalSize)
        if percent > self.old_percent:
            self.old_percent = percent
            osc_client.send_message('/downloading_sound_progress', [self.outfile, percent])
        if percent >= 100:
            osc_client.send_message('/finished_downloading_sound', [self.outfile])


def download_sound(url, outfile):
    if not (os.path.exists(outfile) and os.path.getsize(outfile) > 0):
        # If sound does not exist, start downloading
        print('- Downloading ' + url)
        progress = SoundDownloader(url, outfile)
        urllib.request.urlretrieve(url, outfile, reporthook=progress.download_progress_hook)
    else:
        # If sound already exists, notify plugin about that
        print('- Skip downloading ' + url + ' (already downloaded)')
        osc_client.send_message('/finished_downloading_sound', [outfile])


class DownloadSoundsThread(threading.Thread):

    url = None
    outfile = None

    def __init__(self, _url, _outfile):
        super(DownloadSoundsThread, self).__init__()
        url = _url
        outfile = _outfile

    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        download_sound(self.url, self.outfile)


def download_all_sounds(urls, outfiles):
    for url, outfile in zip(urls, outfiles):
        DownloadSoundsThread(url, outfile).start()


# --- HTTP Server ------------------------------------------------------------------------

@http_server.route('/', methods=['GET'])  # Serve main interface HTML file
def index():
    tvars = {}
    return render_template("index.html", **tvars)

@http_server.route('/simulator', methods=['GET'])  # Serve the interface which simulates blackboard
def simulator():
    tvars = {}
    return render_template("simulator.html", **tvars)

@http_server.route('/simulator_get_display', methods=['GET'])  # Get contents of the display
def simulator_get_display():
    global elk_bridge
    return '<br>'.join(elk_bridge.display_contents_for_simulator)

@http_server.route('/simulator_user_action', methods=['GET'])  # Simulate user pressing a button, knob, etc
def simulator_user_action():
    global elk_bridge
    action = request.args['action']
    value = request.args['value']
    if action.startswith("button"):
        button_idx = int(action.split('_')[2])
        elk_bridge.handle_buttons(button_idx, value)
    elif action.startswith("slider"):
        slider_idx = int(action.split('_')[1])
        elk_bridge.handle_faders(slider_idx, float(value))
    return 'Action received'

@http_server.route('/send_osc', methods=['GET'])  # Forwards the request contents as an OSC message to the plugin
def send_osc():
    address = request.args['address']
    values = [getattr(__builtins__, type_name)(value) for type_name, value in zip(request.args['types'].split(';'), request.args['values'].split(';'))]
    osc_client.send_message(address, values)
    return 'OSC sent'

@http_server.route('/state_from_plugin', methods=['POST'])  # Receives a state update from the plugin and saves the contents
def state_from_plugin():
    global plugin_state
    global plguin_state_xml
    global time_post_state_received
    global connection_with_plugin_ok
    time_post_state_received = time.time()
    plugin_state = request.data
    used_parser = "html.parser"
    plguin_state_xml = BeautifulSoup(plugin_state, "html.parser")

    '''
    try:
        # Requires lxml to be installed https://lxml.de/installation.html
        plguin_state_xml = BeautifulSoup(plugin_state, "lxml-xml")
        used_parser = "xml"
    except Exception as e:
        print(e)
    '''
    plguin_state_xml = BeautifulSoup(plugin_state, "html.parser")

    print('Time loading XML: {0} ({1})'.format(time.time() - time_post_state_received, used_parser))
    sys.stdout.flush()

    if connection_with_plugin_ok == False:
        connection_with_plugin_ok = True
        print('* Plugin connected')
    return 'State received'

@http_server.route('/update_state', methods=['GET'])  # Client requests to get an updated version of the state
def update_state():
    global connection_with_plugin_ok
    if time_post_state_received is not None and time.time() - time_post_state_received > old_state_seconds_threshold:
        if connection_with_plugin_ok == True:
            connection_with_plugin_ok = False
            print('* Plugin disconnected')
        return 'Maybe old'
    else:
        return Response(plugin_state, mimetype='text/xml')

@http_server.route('/get_system_stats', methods=['GET'])  # Return system stats
def get_system_stats():
    if system_stats:
        return "temp={0}\ncpu={1}%\nmem={2}%\nMSW:\n{3}".format(system_stats['temp'], system_stats['cpu'], system_stats['mem'], system_stats['msw'])
    else:
        return "No stats"

@http_server.route('/download_sounds', methods=['GET'])  # Download the sounds requested by the plugin
def download_sounds():
    urls_to_download = []
    outfiles = []
    for url in request.args['urls'].split(','):
        if url:
            sound_id = url.split('/')[-1].split('_')[0]
            outfile = os.path.join(request.args['location'], sound_id + '.ogg')
            urls_to_download.append(url)
            outfiles.append(outfile)

    logger = logging.getLogger('werkzeug')
    logger.debug(outfiles)
    download_all_sounds(urls_to_download, outfiles)
    #thread = Thread(target = download_all_sounds, args = (urls_to_download, outfiles, ))
    #thread.start()
    return 'Downloading async...'


# --- Main ------------------------------------------------------------------------

class ElkBridgeThread(threading.Thread):
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        run_elk_bridge_loop()


class CollectSystemStatsThread(threading.Thread):
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        run_collect_system_stats_loop()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--osc_ip", default="127.0.0.1", help="The IP to send OSC to")
    parser.add_argument("--osc_port", type=int, default=9001, help="The port to send OSC messages to")
    parser.add_argument("--http_port", type=int, default=8123, help="The port the web server should listen at")
    args = parser.parse_args()

    # If on ELK platform, start the thread that will do the communication with the hardware, draw on display, etc.
    if elk_bridge_refresh_fps:
        ElkBridgeThread().start()

    # Also if on ELK platform, start the thread that will collect and update system stats periodically
    if system_stats_refresh_fps:
        collect_system_stats()
        CollectSystemStatsThread().start()

    # Run aconnect
    print('* Running aconnect')
    out = get_status_output("aconnect 16 128")
    print(out)

    # Start OSC client to send OSC messages to plugin
    print('* Starting OSCClient')
    osc_client = OSCClient(args.osc_ip, args.osc_port, encoding='utf8')

    # Start HTTP server that will receive state updates from the plugin and implements the web interface
    print('* Starting HTTP server at {}'.format(args.http_port))
    http_server.run(host='0.0.0.0', port=args.http_port, debug=True if platform == "desktop" else False)
