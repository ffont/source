#!/usr/bin/env python3

import asyncio
import argparse
import glob
import json
import logging
import os
import random
import requests
import subprocess
import sys
import time
import urllib
import pprint

from collections import defaultdict

from bs4 import BeautifulSoup

try:
    from elkpy import sushicontroller as sc
    from elkpy import midicontroller as mc
except ImportError:
    # Not running in ELK platform, no problem as ELK-specific code won't be run
    pass

try:
    from elk_ui_custom import ElkUIController, N_LEDS
except ModuleNotFoundError:
    N_LEDS = 9

from helpers import Timer, frame_from_start_animation, justify_text, START_ANIMATION_DURATION, translate_cc_license_url, StateNames, get_all_sound_usage_logs, sizeof_fmt

from source_states import state_manager, source_plugin_interface, ALLOWED_AUDIO_FILE_EXTENSIONS, get_local_audio_files_path, get_preset_files_path, get_sound_audio_files_path

from freesound_interface import get_access_token_from_code, get_crurrently_logged_in_user, is_logged_in, get_stored_access_token

from flask import Flask, render_template, request, redirect, url_for, Response, jsonify, send_from_directory
from oscpy.client import OSCClient
from oscpy.server import OSCThreadServer
import threading

if sys.platform == "linux" or sys.platform == "linux2":
    platform = "ELK"
else:
    platform = "desktop"

# Configure Flask logging to only show error messages
disable_flask_logging = True
if disable_flask_logging:
    log = logging.getLogger('werkzeug')
    log.setLevel(logging.ERROR)

elk_bridge_refresh_fps = 20
system_stats_refresh_fps = 1

current_frame = None
current_frame_directory = 'static/frame/'

system_stats = {}
system_stats_thread = None

elk_bridge = None
elk_bridge_thread = None

http_server = Flask(__name__, template_folder='/udata/source/app/' if platform == "ELK" else 'html/')

BUTTON_LONG_PRESS_TIME = 0.25
BUTTON_DOUBLE_PRESS_TIME = 0.2

SOURCE_TRACK_ID = 0


# --- Utils ------------------------------------------------------------------------


def get_status_output(command):
    return os.popen(command).read()[:-1]  # Remove last char which is always \n


last_time_restarting_connman = 0
network_currently_connected = False


def collect_system_stats():
    global system_stats
    global last_time_restarting_connman
    global network_currently_connected

    if platform == "ELK":

        # Get system stats like cpu usage, temperature, etc.
        try:
            system_stats['temp'] = get_status_output("sudo vcgencmd measure_temp").replace('temp=', '').replace("'C", '')
            system_stats['cpu'] = get_status_output("/bin/grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage \"%\"}'")[0:4]
            system_stats['mem'] = get_status_output("free | /bin/grep Mem | awk '{print $3/$2 * 100.0}'")[0:4]
            proc_xenomai_output = get_status_output("/bin/more /proc/xenomai/sched/stat | /bin/grep sushi_b64")
            total_cpu = 0
            for line in proc_xenomai_output.split('\n'):
                total_cpu += float(line.split('sushi_b64')[0].strip().split(' ')[-1])
            system_stats['xenomai_cpu'] = total_cpu
            system_stats['n_sushi_proc'] = get_status_output("/bin/ps -e | /bin/grep sushi | wc -l")

            # Check network status and reconnect if disconnected
            connmanctl_services_output = get_status_output("sudo connmanctl services")
            network_is_connected = '*AO' in connmanctl_services_output
            if network_is_connected:
                if not network_currently_connected:
                    # Network has changed state from not connected to connected
                    # Do some "initialization" stuff that requires a connection
                    # NOTE: nothing to be done so far
                    network_currently_connected = True  # Set this to true so we don't do the initialization again

                system_stats['network_ssid'] = connmanctl_services_output.split('*AO ')[1].split(' ')[0]
                last_time_restarting_connman = 0
            else:
                system_stats['network_ssid'] = '-' + ' (R)' if last_time_restarting_connman != 0 else ''
                if time.time() - last_time_restarting_connman > 10:  # Don't try to reconnect more often than every 10 seconds
                    print('* Restarting connman')
                    last_time_restarting_connman = time.time()
                    get_status_output("sudo connmanctl enable wifi")
                    get_status_output("sudo systemctl restart connman")

            # Check aconnect status and reconnect if disconnected
            aconnect_l_output = get_status_output("aconnect -l")
            aconnect_is_connected = 'Connected' in aconnect_l_output
            if not aconnect_is_connected:
                print('* Running aconnect')
                out = get_status_output("aconnect 16 128")
                print(out)

        except:
            system_stats = {}


def run_collect_system_stats_loop():
    print('* Starting system stats loop')
    while True:
        time.sleep(1.0/system_stats_refresh_fps)
        collect_system_stats()


# --- ELK Bridge ------------------------------------------------------------------------

class ElkBridge(object):

    buttons_state = {}
    button_pressing_log = defaultdict(list)
    button_timers = [None, None, None, None, None, None, None, None, None]

    encoder_pressing_log = []
    encoder_timer = None

    buttons_sent_note_on = {}
    selected_sound_idx = None
    current_parameter_page = 0
    starttime = 0

    uic = None
    sushic = None
    midic = None

    def __init__(self):
        while self.sushic is None:
            try:
                self.sushic = sc.SushiController()
                # Print available parameters
                for track_info in self.sushic.audio_graph.get_all_tracks():
                    print('Track ID {}'.format(track_info.id))
                    print(self.sushic.parameters.get_track_parameters(track_info.id))
                sys.stdout.flush()

                # Set init gain to high number
                controller_id = SOURCE_TRACK_ID
                param_id = 0  # Gain
                self.sushic.parameters.set_parameter_value(controller_id, param_id, 0.92)
                print("Initialized SushiController")
            except Exception as e:
                print('ERROR initializing SushiController: {0}'.format(e))
                if platform == "ELK":
                    time.sleep(1)  # Wait for 1 second and try again
                else:
                    break  # Break while because outside ELK platform this will never succeed

        while self.midic is None:
            try:
                self.midic = mc.MidiController()
                midic_initialized = True
                print("Initialized MidiController")
                self.connect_midi_channels_to_source()
            except Exception as e:
                print('ERROR initializing MidiController: {0}'.format(e))
                if platform == "ELK":
                    time.sleep(1)  # Wait for 1 second and try again
                else:
                    break  # Break while because outside ELK platform this will never succeed

        while self.uic is None:
            try:
                self.uic = ElkUIController(self.handle_faders,
                                           self.handle_buttons,
                                           self.handle_encoder_button,
                                           self.handle_encoder,
                                           self.handle_potentiometer)
                state_manager.set_ui_client(self.uic)
                print("Initialized ElkUIController")
            except Exception as e:
                print('ERROR initializing ElkUIController: {0}'.format(e))
                if platform == "ELK":
                    time.sleep(1)  # Wait for 1 second and try again
                else:
                    break  # Break while because outside ELK platform this will never succeed

        # Compute first display frame
        self.compute_display_frame(0)

    def connect_midi_channels_to_source(self, midi_channel=0):
        if self.midic is not None:
            print("Connecting midi channel {} to source (0=omni)".format(midi_channel))

            raw_midi = True
            track_identifier = 0  # Source track ID
            port = 0

            # First disconnect all existing connections (if any)
            for c in self.midic.get_all_kbd_input_connections():
                self.midic.disconnect_kbd_input(c.track, c.channel, c.port, c.raw_midi)

            # Now make new connection
            # channel 0 = omni, channels 1-16 are normal midi channels
            self.midic.connect_kbd_input_to_track(self.midic._sushi_proto.TrackIdentifier(id=track_identifier),
                                                  self.midic._sushi_proto.MidiChannel(channel=midi_channel), port, raw_midi)
            self.current_midi_in_channel = midi_channel

    def is_shift_pressed(self):
        return self.buttons_state.get(0, 0) == 1

    def handle_potentiometer(self, val):
        if self.sushic is not None:
            controller_id = SOURCE_TRACK_ID
            param_id = 0  # Gain
            # For some reason the gain only seems to be doing something when value is set between
            # 0.5 and 1.0, so we adapt the range
            val = val/2 + 0.5
            self.sushic.parameters.set_parameter_value(controller_id, param_id, val)

    def handle_faders(self, fader_idx, val):
        if not state_manager.block_ui_input:
            state_manager.current_state.on_fader_moved(fader_idx, val, shift=self.is_shift_pressed())

    def handle_buttons(self, button_idx, val):

        def delayed_double_press_button_check(button_idx):
            last_time_pressed = self.button_pressing_log[button_idx][-1]
            try:
                previous_time_pressed = self.button_pressing_log[button_idx][-2]
            except IndexError:
                previous_time_pressed = 0
            if last_time_pressed - previous_time_pressed < BUTTON_DOUBLE_PRESS_TIME:
                # If time between last 2 pressings is shorter than BUTTON_DOUBLE_PRESS_TIME, trigger double press action
                if not state_manager.block_ui_input:
                    state_manager.current_state.on_button_double_pressed(button_idx, shift=self.is_shift_pressed())
            else:
                if not state_manager.block_ui_input:
                    state_manager.current_state.on_button_pressed(button_idx, shift=self.is_shift_pressed())

        is_being_pressed = int(val) == 1
        if is_being_pressed:
            # Trigger the raw press action
            if not state_manager.block_ui_input:
                state_manager.current_state.on_button_down(button_idx, shift=self.is_shift_pressed())

            # Also when button is pressed, save the current time it was pressed and clear any delayed execution timer that existed
            self.button_pressing_log[button_idx].append(time.time())
            self.button_pressing_log[button_idx] = self.button_pressing_log[button_idx][-2:]  # Keep only last 2 records (needed to check double presses)
            if self.button_timers[button_idx] is not None:
                self.button_timers[button_idx].setClearTimer()
        else:
            # Trigger the raw release action
            if not state_manager.block_ui_input:
                state_manager.current_state.on_button_up(button_idx, shift=self.is_shift_pressed())

            # Also when button is released check the following:
            # * If pressed for longer than BUTTON_LONG_PRESS_TIME, trigger a "long press" action
            # * If pressed for shorter than BUTTON_LONG_PRESS_TIME, set up a delayed action to trigger the button press and decide whether it should be "single" or "double" press
            last_time_pressed = self.button_pressing_log[button_idx][-1]
            if time.time() - last_time_pressed > BUTTON_LONG_PRESS_TIME:
                # If button pressed for long time, trigger long press action
                if not state_manager.block_ui_input:
                    state_manager.current_state.on_button_long_pressed(button_idx, shift=self.is_shift_pressed())
            else:
                self.button_timers[button_idx] = Timer()
                self.button_timers[button_idx].setTimeout(delayed_double_press_button_check, [button_idx], BUTTON_DOUBLE_PRESS_TIME)

        # Updated stored button's state
        self.buttons_state[button_idx] = int(val)

    def handle_encoder_button(self, val):

        def delayed_double_press_encoder_check():
            last_time_pressed = self.encoder_pressing_log[-1]
            try:
                previous_time_pressed = self.encoder_pressing_log[-2]
            except IndexError:
                previous_time_pressed = 0
            if last_time_pressed - previous_time_pressed < BUTTON_DOUBLE_PRESS_TIME:
                # If time between last 2 pressings is shorter than BUTTON_DOUBLE_PRESS_TIME, trigger double press action
                state_manager.current_state.on_encoder_double_pressed(shift=self.is_shift_pressed())
            else:
                state_manager.current_state.on_encoder_pressed(shift=self.is_shift_pressed())

        is_being_pressed = int(val) == 1
        if is_being_pressed:
            # Trigger the raw press action
            state_manager.current_state.on_encoder_down(shift=self.is_shift_pressed())

            # Also when encoder is pressed, save the current time it was pressed and clear any delayed execution timer that existed
            self.encoder_pressing_log.append(time.time())
            self.encoder_pressing_log = self.encoder_pressing_log[-2:]  # Keep only last 2 records (needed to check double presses)
            if self.encoder_timer is not None:
                self.encoder_timer.setClearTimer()
        else:
            # Trigger the raw release action
            if not state_manager.block_ui_input:
                state_manager.current_state.on_encoder_up(shift=self.is_shift_pressed())

            # Also when encoder is released check the following:
            # * If pressed for longer than BUTTON_LONG_PRESS_TIME, trigger a "long press" action
            # * If pressed for shorter than BUTTON_LONG_PRESS_TIME, set up a delayed action to trigger the encoder press and decide whether it should be "single" or "double" press
            last_time_pressed = self.encoder_pressing_log[-1]
            if time.time() - last_time_pressed > BUTTON_LONG_PRESS_TIME:
                # If encoder pressed for long time, trigger long press action
                if not state_manager.block_ui_input:
                    state_manager.current_state.on_encoder_long_pressed(shift=self.is_shift_pressed())
            else:
                self.encoder_timer = Timer()
                self.encoder_timer.setTimeout(delayed_double_press_encoder_check, [], BUTTON_DOUBLE_PRESS_TIME)

    def handle_encoder(self, direction):
        if not state_manager.block_ui_input:
            state_manager.current_state.on_encoder_rotated(direction, shift=self.is_shift_pressed())

    def run(self):

        if self.uic is not None:
            self.uic.run()

        # Start loop to call refresh for the display
        starttime = time.time()
        counter = 0
        leds_have_been_unset_after_animation = False
        while True:
            time.sleep(1.0/elk_bridge_refresh_fps)
            counter += 1
            time_since_start = time.time() - starttime
            if time_since_start < START_ANIMATION_DURATION and state_manager.should_show_start_animation:
                frame = frame_from_start_animation(time_since_start/START_ANIMATION_DURATION, counter)
                if self.uic is not None:
                    led_counter = counter % (N_LEDS + 1)
                    if led_counter == 0:
                        # Stop all leds
                        for i in range(0, N_LEDS):
                            self.uic.set_led(i, 0)
                    else:
                        # Light current led
                        self.uic.set_led(led_counter - 1, 1)
            else:
                if state_manager.should_show_start_animation is True:
                    state_manager.should_show_start_animation = False

                if self.uic is not None:
                    if not leds_have_been_unset_after_animation:
                        for i in range(0, N_LEDS):
                            self.uic.set_led(i, 0)
                        leds_have_been_unset_after_animation = True
                frame = self.compute_display_frame(counter)

            # Save frame to "global_frame" var (used by simulator)
            global current_frame
            current_frame = frame

            # Send new frame to OLED display
            if self.uic is not None:
                self.uic.set_display_frame(frame)
                self.uic.refresh()

    def compute_display_frame(self, counter):

        # Process plugin state information and send it to state manager
        source_extra_state = {}

        # Check plugin connection status
        source_extra_state[StateNames.CONNECTION_WITH_PLUGIN_OK] = not source_plugin_interface.sss.plugin_may_be_down()
        if not source_extra_state[StateNames.CONNECTION_WITH_PLUGIN_OK]:
            state_manager.show_global_message("Pl. disconnected :(")

        # Check network connection status
        source_extra_state[StateNames.NETWORK_IS_CONNECTED] = '(R)' not in system_stats.get("network_ssid", "-") and system_stats.get("network_ssid", "-").lower() != 'no network'

        # Add other system stats
        source_extra_state[StateNames.SYSTEM_STATS] = system_stats

        # Send processed state to state manager
        source_plugin_interface.update_source_extra_state(source_extra_state)

        # Generate new frame
        frame = state_manager.draw_display_frame()

        return frame


def run_elk_bridge_loop():
    global elk_bridge
    print('* Starting ElkBridge')
    elk_bridge = ElkBridge()
    elk_bridge.run()


# --- Sound downloader ------------------------------------------------------------------------

class SoundDownloaderProgress:
    def __init__(self, url, outfile, sound_uuid):
        self.time_started = time.time()
        self.old_percent = 0
        self.url = url
        self.outfile = outfile
        self.sound_uuid = sound_uuid

    def download_progress_hook(self, count, blockSize, totalSize):
        percent = count * blockSize * 100 / totalSize
        if percent > self.old_percent:
            self.old_percent = percent
            source_plugin_interface.send_osc_to_plugin('/downloading_sound_progress', [self.sound_uuid, self.outfile, percent])
        if percent >= 100:
            os.rename(self.outfile + '.tmp', self.outfile)
            source_plugin_interface.send_osc_to_plugin('/finished_downloading_sound', [self.sound_uuid, self.outfile, True])
            n_seconds = time.time() - self.time_started
            kbytes_per_second = count * blockSize / n_seconds / 1000
            print('- Finished downloading {} ({} at {:.0f}kbps)'.format(self.url, sizeof_fmt(totalSize), kbytes_per_second))

def download_sound(url, outfile, sound_uuid, use_header):
    print('- Downloading ' + url)
    progress = SoundDownloaderProgress(url, outfile, sound_uuid)
    if ':' in use_header:
        opener = urllib.request.build_opener()
        if len(use_header) > len('Authorization: Bearer ' + 10):
            # If the plugin has sent a header long enough so that it contains the actual access token, use it
            opener.addheaders = [(use_header.split(':')[0], use_header.split(':')[1])]
        else:
            # If the plugin did not send an access token, use the one storen in python ui code
            opener.addheaders = [('Authorization', 'Bearer {}'.format(get_stored_access_token()))]
        urllib.request.install_opener(opener)
    try:
        urllib.request.urlretrieve(url, outfile + '.tmp', reporthook=progress.download_progress_hook)
    except urllib.error.ContentTooShortError as e:
        print('ERROR DOWNLOADING AFTER {:.2f} seconds: {}'.format(time.time()-progress.time_started, progress.url))
        print(e)


class DownloadSoundsThread(threading.Thread):

    download_url = None
    download_to_path = None
    sound_uuid = None
    use_header = None

    def __init__(self, _download_url, _download_to_path, _sound_uuid, _use_header):
        super(DownloadSoundsThread, self).__init__()
        self.download_url = _download_url
        self.download_to_path = _download_to_path
        self.sound_uuid = _sound_uuid
        self.use_header = _use_header

    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        download_sound(self.download_url, self.download_to_path, self.sound_uuid, self.use_header)


# --- HTTP Server ------------------------------------------------------------------------

@http_server.route('/download_sound', methods=['GET'])  # Download the sounds requested by the plugin
def download_sound_endpoint():
    sound_uuid = request.args['soundUUID']
    download_url = request.args['urlToDownloadFrom']
    download_to_path = request.args['pathToSaveDownloadedFile']
    use_header = request.args['downloadHeaders']
    DownloadSoundsThread(download_url, download_to_path, sound_uuid, use_header).start()
    return 'Downloading async...'


@http_server.route('/', methods=['GET', 'POST'])  # Serve main interface HTML file
def index():
    tvars = {'freesound_username': get_crurrently_logged_in_user()}
    if request.method == 'GET':
        return render_template("index.html", **tvars)
    elif request.method == 'POST':
        if request.form.get('presetIdx', False) != False:
            # Sending preset files
            try:
                start_preset_idx = int(request.form.get('presetIdx'))
            except ValueError:
                return render_template("index.html", message_presets='Wrong preset number')
            preset_files_directory = get_preset_files_path()
            if preset_files_directory is not None:
                n_saved = 0
                uploaded_files = request.files.getlist("file[]")
                for f in uploaded_files:
                    if f.filename.split('.')[-1] in ['xml']:  # Check that format is ok
                        f.save(os.path.join(preset_files_directory, '{}.xml'.format(start_preset_idx + n_saved)))
                        n_saved += 1
                tvars.update(message_presets='{} presets transferred'.format(n_saved))
                return render_template("index.html", **tvars)
            else:
                return render_template("index.html", message_presets='Errors transferring presets')
        else:
            # Sending sound files
            save_to_local_files_directory = request.form.get('toLocal', False) != False
            if save_to_local_files_directory:
                files_directory = get_local_audio_files_path()
            else:
                files_directory = get_sound_audio_files_path()
            if files_directory is not None:
                n_saved = 0
                uploaded_files = request.files.getlist("file[]")
                for f in uploaded_files:
                    if f.filename.split('.')[-1] in ALLOWED_AUDIO_FILE_EXTENSIONS:  # Check that format is ok
                        f.save(os.path.join(files_directory, f.filename))
                        n_saved += 1
                tvars.update(message_sounds='{} sounds transferred'.format(n_saved))
                return render_template("index.html", **tvars)
            else:
                return render_template("index.html", message_sounds='Errors transferring sounds')


@http_server.route('/update_html_ui_state', methods=['GET'])  # Client requests to get an updated version of the state
def update_html_ui_state():
    state = {
        'should_ask_for_data': False,
        'should_load_url': False
    }
    if state_manager.is_waiting_for_data_from_web():
        state['should_ask_for_data'] = True
        state['web_form_id'] = state_manager.current_state.web_form_id
        state['web_form_data'] = state_manager.current_state.data_for_web_form_id
    if state_manager.open_url_in_browser is not None:
        state['should_load_url'] = state_manager.open_url_in_browser
        state_manager.open_url_in_browser = None
    return jsonify(state)


@http_server.route('/usage_log', methods=['GET'])  # Serve interface HTML file with all the available controls
def usage_log():
    tvars = {'log': get_all_sound_usage_logs()}
    return render_template("sound_usage_log.html", **tvars)


@http_server.route('/freesound_login_callback', methods=['GET'])  # Serve interface HTML file with all the available controls
def freesound_login_callback():
    code = request.args.get('code')
    get_access_token_from_code(code)
    return redirect(url_for('index'))


@http_server.route('/simulator', methods=['GET'])  # Serve the interface which simulates blackboard
def simulator():
    tvars = {}
    return render_template("simulator.html", **tvars)


@http_server.route('/simulator_get_display', methods=['GET'])  # Get contents of the display
def simulator_get_display():
    global current_frame
    global current_frame_directory
    if not os.path.exists(current_frame_directory):
        os.makedirs(current_frame_directory)
    files = glob.glob(os.path.join(current_frame_directory, '*'))
    for f in files:
        os.remove(f)
    path = os.path.join(current_frame_directory, 'frame{0}.jpg'.format(random.randint(0, 9999999)))
    if current_frame is not None:
        current_frame.save(path)
        return path
    else:
        return ''


@http_server.route('/simulator_user_action', methods=['GET'])  # Simulate user pressing a button, knob, etc
def simulator_user_action():
    global elk_bridge
    action = request.args['action']
    value = request.args['value']
    if action.startswith("button"):
        button_idx = int(action.split('_')[2])
        if elk_bridge is not None:
            elk_bridge.handle_buttons(button_idx, value)
    elif action.startswith("slider"):
        slider_idx = int(action.split('_')[1])
        if elk_bridge is not None:
            elk_bridge.handle_faders(slider_idx, float(value))
    elif action.startswith("encoder"):
        sub_action = action.split('_')[1]
        if sub_action == 'rotate':
            elk_bridge.handle_encoder(int(value))
        elif sub_action == 'press':
            elk_bridge.handle_encoder_button(1.0)
        elif sub_action == 'release':
            elk_bridge.handle_encoder_button(0.0)
    return 'Action received'

@http_server.route('/get_source_state', methods=['GET'])  # Gets the internal XML state of the plugin and the processed JSON version, used by the simulator
def get_source_state():
    if source_plugin_interface.sss.state_soup is not None:
        data = {
            'pluginState': source_plugin_interface.sss.state_soup.prettify(),
        }
    else:
        data = {
            'pluginState': 'No state',
        }
    return jsonify(data)

@http_server.route('/receive_data_from_web', methods=['GET'])  # Endpoint used to recieve data form the web interface (for UI options that require web interface for example)
def receive_data_from_web():
    # "data" is a list of key/value pairs serialized as: key1:value1,key2:value2,key3:value3...
    data = request.args.get('data', "")
    data_dict = {element.split(':')[0]: element.split(':')[1] for element in data.split(',')}
    state_manager.process_data_from_web(data_dict)
    return 'Thanks!'


@http_server.route('/send_osc', methods=['GET'])  # Forwards the request contents as an OSC message to the plugin
def send_osc():
    address = request.args['address']
    values = [getattr(__builtins__, type_name)(value) for type_name, value in zip(request.args['types'].split(';'), request.args['values'].split(';'))]
    source_plugin_interface.send_osc_to_plugin(address, values)
    return 'OSC sent'


# --- Main ------------------------------------------------------------------------

class ElkBridgeThread(threading.Thread):
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        run_elk_bridge_loop()


class CollectSystemStatsThread(threading.Thread):
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        run_collect_system_stats_loop()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--http_port", type=int, default=8123, help="The port the web server should listen at")
    args = parser.parse_args()

    # If on ELK platform, start the thread that will do the communication with the hardware, draw on display, etc.
    if elk_bridge_refresh_fps:
        ElkBridgeThread().start()

    # Also if on ELK platform, start the thread that will collect and update system stats periodically
    if system_stats_refresh_fps:
        collect_system_stats()
        CollectSystemStatsThread().start()

    print('* Running aconnect')
    get_status_output("aconnect 16 128")

    # Start HTTP server that will receive state updates from the plugin and implements the web interface
    print('* Starting HTTP server at {}'.format(args.http_port))
    http_server.run(host='0.0.0.0', port=args.http_port, debug=False)
