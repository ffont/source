/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== index.html ==================
static const unsigned char temp_binary_data_0[] =
"<!DOCTYPE html>\n"
"<html>\n"
"\n"
"<head>\n"
"    <title>Source, a Freesound-powered sampler</title>\n"
"\n"
"    <style>\n"
"        .cards_container_slide {\n"
"            overflow: scroll;\n"
"            white-space: nowrap;\n"
"        }\n"
"\n"
"        .controls_card {\n"
"            display:inline-block;\n"
"            padding:5px;\n"
"            background-color:#eeeeee;\n"
"            margin:5px;\n"
"        }\n"
"        \n"
"        .voice {\n"
"            display: inline-block;\n"
"            width: 30px;\n"
"            height: 30px;\n"
"            border: 1px solid black;\n"
"        }\n"
"\n"
"        .voice_progress {\n"
"            overflow: hidden;\n"
"            background-color: greenyellow;\n"
"            height: 100%;\n"
"        }\n"
"\n"
"        #volatileState{\n"
"            max-width: 260px;\n"
"        }\n"
"\n"
"        #individualSoundEditors{\n"
"            display: inline-block;\n"
"        }\n"
"\n"
"        #allSoundsEditor{\n"
"            display: inline-block;\n"
"        }\n"
"    </style>\n"
"\n"
"    <script>\n"
"\n"
"        var updateStateTimer;\n"
"        var updateSystemStatsTimer;\n"
"        var lastReceivedStateText;\n"
"        var lastReceivedStateXml;\n"
"        var updateStateInterval = 50;\n"
"\n"
"        document.addEventListener(\"DOMContentLoaded\", function () {\n"
"            document.getElementById('allSoundsEditor').innerHTML = '<b>All sounds</b><br>' + generateSoundEditControls(-1);\n"
"            updateAllSliderLabels();\n"
"\n"
"            startAutoUpdate();\n"
"        });\n"
"\n"
"        function startAutoUpdate(){\n"
"            updateStateTimer = setInterval(function () {\n"
"                updateState();\n"
"            }, updateStateInterval);\n"
"\n"
"            updateSystemStatsTimer = setInterval(function () {\n"
"                getSystemStats();\n"
"            }, 1000);\n"
"        }\n"
"\n"
"        function stopAutoUpdate() {\n"
"            window.clearInterval(updateStateTimer);\n"
"            window.clearInterval(updateSystemStatsTimer);\n"
"        }\n"
"\n"
"        function updateAllSliderLabels(){\n"
"            var elements = document.querySelectorAll(\"input[type=range]\")\n"
"            for (var i = 0, sliderElement; sliderElement = elements[i++];) {\n"
"                updateSliderLabel(sliderElement);\n"
"            }\n"
"        }\n"
"\n"
"        function updateSliderLabel(sliderElement){\n"
"            var labelElement = document.getElementById(sliderElement.id + \"Label\");\n"
"            if (labelElement != null) {\n"
"                labelElement.innerHTML = getProcessedSoundParameterValuLinToExp(sliderElement).toFixed(2);\n"
"            }\n"
"        }\n"
"\n"
"        var expStrength = 2;\n"
"\n"
"        function linToExp(x){\n"
"            return (Math.pow(x,expStrength));\n"
"        }\n"
"\n"
"        function expToLin(x){\n"
"            return (Math.pow(x,1/expStrength));\n"
"        }\n"
"\n"
"        function sliderShouldBehaveExponentially(sliderElement){\n"
"            var name = sliderElement.name;\n"
"            if (name != null){\n"
"                if ((name.indexOf(\"attack\") > -1) ||\n"
"                    (name.indexOf(\"decay\") > -1) ||\n"
"                    (name.indexOf(\"release\") > -1) ||\n"
"                    (name == \"filterCutoff\")\n"
"                ){\n"
"                    return true;\n"
"                }\n"
"            }\n"
"            \n"
"            return false;\n"
"        }\n"
"\n"
"        function getProcessedSoundParameterValuLinToExp(sliderElement){\n"
"            var value = parseFloat(sliderElement.value, 10);\n"
"            if (sliderShouldBehaveExponentially(sliderElement) == true){\n"
"                return linToExp(value/sliderElement.max)*sliderElement.max;\n"
"            } else {\n"
"                return value;\n"
"            }\n"
"        }\n"
"\n"
"        function getProcessedSoundParameterValueExpToLin(sliderElement, valueRaw){\n"
"            if (sliderShouldBehaveExponentially(sliderElement) == true){\n"
"                return expToLin(valueRaw/sliderElement.max)*sliderElement.max;\n"
"            } else {\n"
"                return valueRaw;\n"
"            }\n"
"        }\n"
"\n"
"        function sendOsc(address, values, types) {\n"
"            var xhr = new XMLHttpRequest();\n"
"            xhr.onreadystatechange = function () {\n"
"                if (this.readyState != 4) return;\n"
"                if (this.status == 200) {\n"
"                }\n"
"            };\n"
"            xhr.open('GET', '/send_osc?address=' + address + '&values=' + values.join(';') + '&types=' + types, true);\n"
"            xhr.send();\n"
"        }\n"
"\n"
"        function setSoundParameter(soundIdx, sliderElement){\n"
"            console.log(soundIdx)\n"
"            sliderElement.setAttribute(\"data-lastMoved\", Date.now()/1000);\n"
"            updateSliderLabel(sliderElement);\n"
"            sendOsc('/set_sound_parameter', [soundIdx, sliderElement.name, getProcessedSoundParameterValuLinToExp(sliderElement)], 'int;str;float')\n"
"        }\n"
"\n"
"        function setSoundParameterInt(soundIdx, sliderElement){\n"
"            sliderElement.setAttribute(\"data-lastMoved\", Date.now()/1000);\n"
"            updateSliderLabel(sliderElement);\n"
"            sendOsc('/set_sound_parameter_int', [soundIdx, sliderElement.name, sliderElement.value], 'int;str;int')\n"
"        }\n"
"\n"
"        function makeQuery(){\n"
"            var query = document.getElementsByName('query')[0].value;\n"
"            var numSounds = document.getElementsByName('numSounds')[0].value || 16;\n"
"            var maxSoundLength = document.getElementsByName('maxSoundLength')[0].value || 0.5;\n"
"            sendOsc('/new_query', [query, numSounds, maxSoundLength], 'str;int;float')\n"
"        }\n"
"\n"
"        function setMidiInChannel() {\n"
"            var midiInChannel = document.getElementsByName('midiInChannel')[0].value;\n"
"            sendOsc('/set_midi_in_channel', [midiInChannel], 'int')\n"
"        }\n"
"\n"
"        function setMidiThru() {\n"
"            var midiThru = document.getElementsByName('midiThru')[0].checked;\n"
"            sendOsc('/set_midi_thru', [midiThru ? 1: 0], 'int')\n"
"        }\n"
"\n"
"        function setReverbParameters() {\n"
"            var roomSize = document.getElementById('0_roomSize').value;\n"
"            var damping = document.getElementById('0_damping').value;\n"
"            var wetLevel = document.getElementById('0_wetLevel').value;\n"
"            var dryLevel = document.getElementById('0_dryLevel').value;\n"
"            var width = document.getElementById('0_width').value;\n"
"            var freezeMode = document.getElementById('0_freezeMode').value;\n"
"            updateAllSliderLabels();\n"
"            sendOsc('/set_reverb_parameters', [roomSize, damping, wetLevel, dryLevel, width, freezeMode], 'float;float;float;float;float;float')\n"
"        }\n"
"\n"
"        function setNumVoices() {\n"
"            var numVoices = document.getElementsByName('numVoices')[0].value;\n"
"            sendOsc('/set_polyphony', [numVoices], 'int')\n"
"        }\n"
"\n"
"        function playSound(soundIdx){\n"
"            sendOsc('/play_sound', [soundIdx], 'int')\n"
"        }\n"
"\n"
"        function stopSound(soundIdx){\n"
"            sendOsc('/stop_sound', [soundIdx], 'int')\n"
"        }\n"
"\n"
"        function savePreset(){\n"
"            var name = document.getElementsByName('presetName')[0].value;\n"
"            var idx = document.getElementsByName('presetIdx')[0].value;\n"
"            sendOsc('/save_current_preset', [name, idx], 'str;int')\n"
"        }\n"
"\n"
"        function loadPreset() {\n"
"            var idx = document.getElementsByName('presetIdx')[0].value;\n"
"            sendOsc('/load_preset', [idx], 'int')\n"
"        }\n"
"\n"
"        function nextPreset(){\n"
"            var idx = document.getElementsByName('presetIdx')[0].value;\n"
"            if (idx == undefined){\n"
"                idx = -1;\n"
"            } else {\n"
"                idx = parseInt(idx, 10);\n"
"                if (isNaN(idx)){\n"
"                    idx = -1;\n"
"                }\n"
"            }\n"
"            sendOsc('/load_preset', [idx + 1], 'int')\n"
"        }\n"
"\n"
"        function previousPreset(){\n"
"            var idx = document.getElementsByName('presetIdx')[0].value;\n"
"            if (idx == undefined){\n"
"                idx = 1;\n"
"            } else {\n"
"                idx = parseInt(idx, 10);\n"
"\n"
"                if (isNaN(idx)){\n"
"                    idx = 1;\n"
"                }\n"
"            }\n"
"            if (idx < 1){\n"
"                idx = 1; //Will become 0 when subtracted 1\n"
"            }\n"
"            sendOsc('/load_preset', [idx - 1], 'int')\n"
"        }\n"
"\n"
"        // UI generation\n"
"        function generateSoundEditControls(soundIdx){\n"
"            html = '';\n"
"            // --> Start auto-generated code A\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_filterCutoff\" name=\"filterCutoff\" min=\"10.0\" max=\"20000.0\" value=\"20000.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > filterCutoff: <span id=\"' + so"
"undIdx + '_filterCutoffLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_filterRessonance\" name=\"filterRessonance\" min=\"0.0\" max=\"1.0\" value=\"0.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > filterRessonance: <span id=\"' +"
" soundIdx + '_filterRessonanceLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_maxPitchRatioMod\" name=\"maxPitchRatioMod\" min=\"0.0\" max=\"2.0\" value=\"0.1\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > maxPitchRatioMod: <span id=\"' +"
" soundIdx + '_maxPitchRatioModLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_maxFilterCutoffMod\" name=\"maxFilterCutoffMod\" min=\"0.0\" max=\"100.0\" value=\"10.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > maxFilterCutoffMod: <span"
" id=\"' + soundIdx + '_maxFilterCutoffModLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_gain\" name=\"gain\" min=\"-80.0\" max=\"12.0\" value=\"-10.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > gain: <span id=\"' + soundIdx + '_gainLabel\"></spa"
"n><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_ampADSR.attack\" name=\"ampADSR.attack\" min=\"0.0\" max=\"20.0\" value=\"0.1\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > ampADSR.attack: <span id=\"' + soun"
"dIdx + '_ampADSR.attackLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_ampADSR.decay\" name=\"ampADSR.decay\" min=\"0.0\" max=\"20.0\" value=\"0.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > ampADSR.decay: <span id=\"' + soundId"
"x + '_ampADSR.decayLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_ampADSR.sustain\" name=\"ampADSR.sustain\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > ampADSR.sustain: <span id=\"' + so"
"undIdx + '_ampADSR.sustainLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_ampADSR.release\" name=\"ampADSR.release\" min=\"0.0\" max=\"20.0\" value=\"1.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > ampADSR.release: <span id=\"' + s"
"oundIdx + '_ampADSR.releaseLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_filterADSR.attack\" name=\"filterADSR.attack\" min=\"0.0\" max=\"20.0\" value=\"0.1\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > filterADSR.attack: <span id=\""
"' + soundIdx + '_filterADSR.attackLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_filterADSR.decay\" name=\"filterADSR.decay\" min=\"0.0\" max=\"20.0\" value=\"0.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > filterADSR.decay: <span id=\"' "
"+ soundIdx + '_filterADSR.decayLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_filterADSR.sustain\" name=\"filterADSR.sustain\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > filterADSR.sustain: <span id"
"=\"' + soundIdx + '_filterADSR.sustainLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_filterADSR.release\" name=\"filterADSR.release\" min=\"0.0\" max=\"20.0\" value=\"1.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > filterADSR.release: <span i"
"d=\"' + soundIdx + '_filterADSR.releaseLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_maxFilterADSRMod\" name=\"maxFilterADSRMod\" min=\"0.0\" max=\"10.0\" value=\"1.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > maxFilterADSRMod: <span id=\"' "
"+ soundIdx + '_maxFilterADSRModLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_basePitch\" name=\"basePitch\" min=\"-36.0\" max=\"36.0\" value=\"0.0\" step=\"1.0\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > basePitch: <span id=\"' + soundIdx + '_baseP"
"itchLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_startPosition\" name=\"startPosition\" min=\"0.0\" max=\"1.0\" value=\"0.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > startPosition: <span id=\"' + soundIdx"
" + '_startPositionLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_endPosition\" name=\"endPosition\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > endPosition: <span id=\"' + soundIdx + '_e"
"ndPositionLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_loopStartPosition\" name=\"loopStartPosition\" min=\"0.0\" max=\"1.0\" value=\"0.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > loopStartPosition: <span id=\""
"' + soundIdx + '_loopStartPositionLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_loopEndPosition\" name=\"loopEndPosition\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > loopEndPosition: <span id=\"' + so"
"undIdx + '_loopEndPositionLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_loopXFadeNSamples\" name=\"loopXFadeNSamples\" min=\"10\" max=\"100000\" value=\"500\" step=\"1\" oninput=\"setSoundParameterInt(' + soundIdx + ', this)\" > loopXFadeNSamples: <span id="
"\"' + soundIdx + '_loopXFadeNSamplesLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_launchMode\" name=\"launchMode\" min=\"0\" max=\"2\" value=\"0\" step=\"1\" oninput=\"setSoundParameterInt(' + soundIdx + ', this)\" > launchMode: <span id=\"' + soundIdx + '_launchMode"
"Label\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_reverse\" name=\"reverse\" min=\"0\" max=\"1\" value=\"0\" step=\"1\" oninput=\"setSoundParameterInt(' + soundIdx + ', this)\" > reverse: <span id=\"' + soundIdx + '_reverseLabel\"></sp"
"an><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_maxGainVelMod\" name=\"maxGainVelMod\" min=\"0.0\" max=\"1.0\" value=\"0.5\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > maxGainVelMod: <span id=\"' + soundIdx"
" + '_maxGainVelModLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_pan\" name=\"pan\" min=\"-1.0\" max=\"1.0\" value=\"0.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > pan: <span id=\"' + soundIdx + '_panLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_pitchBendRangeUp\" name=\"pitchBendRangeUp\" min=\"0.0\" max=\"36.0\" value=\"12.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > pitchBendRangeUp: <span id=\"'"
" + soundIdx + '_pitchBendRangeUpLabel\"></span><br>'\n"
"            html += '<input type=\"range\" id=\"' + soundIdx + '_pitchBendRangeDown\" name=\"pitchBendRangeDown\" min=\"0.0\" max=\"36.0\" value=\"12.0\" step=\"0.01\" oninput=\"setSoundParameter(' + soundIdx + ', this)\" > pitchBendRangeDown: <span "
"id=\"' + soundIdx + '_pitchBendRangeDownLabel\"></span><br>'\n"
"            // --> End auto-generated code A\n"
"            return html;\n"
"        }\n"
"\n"
"        function updateElementValueFromXmlStates(element, attrName, newState, oldState){\n"
"            if (oldState !== undefined){\n"
"                if (oldState.getAttribute(attrName) != newState.getAttribute(attrName)){\n"
"                    element.value = newState.getAttribute(attrName);\n"
"                }\n"
"            } else {\n"
"                element.value = newState.getAttribute(attrName);\n"
"            }\n"
"        }\n"
"\n"
"        function createCardForSound(i, sound){ //sound, samplerSound = xml elements\n"
"            var cardElementId = i + \"_\" + sound.getAttribute('soundId');\n"
"            html = '<div class=\"controls_card\" id=\"' + cardElementId + '\">';\n"
"            html += '<b>' + i + \" - \" + sound.getAttribute('soundId') + '</b><button onclick=\"playSound(' + i + ')\">play</button><button onclick=\"stopSound(' + i + ')\">stop</button><br>';\n"
"            html += sound.getAttribute('soundName') + '<br>';\n"
"            html += generateSoundEditControls(i);\n"
"            html += '</div>';\n"
"            return html;\n"
"        }\n"
"\n"
"        function syncUIWithState(xmlState){\n"
"            \n"
"            var SourcePresetState = xmlState.getElementsByTagName('SourcePresetState')[0];\n"
"            var GlobalSettings = xmlState.getElementsByTagName('GlobalSettings')[0];\n"
"            var SamplerState = xmlState.getElementsByTagName('Sampler')[0];\n"
"            var OldStateSourcePresetState, OldStateGlobalSettings, OldStateSamplerState, OldStateReverbParameters = undefined; \n"
"            var ReverbParameters = xmlState.getElementsByTagName('ReverbParameters')[0];\n"
"            if (lastReceivedStateXml !== undefined){\n"
"                OldStateSourcePresetState = lastReceivedStateXml.getElementsByTagName('SourcePresetState')[0];\n"
"                OldStateGlobalSettings = lastReceivedStateXml.getElementsByTagName('GlobalSettings')[0];\n"
"                OldStateSamplerState = lastReceivedStateXml.getElementsByTagName('Sampler')[0];\n"
"                OldStateReverbParameters = lastReceivedStateXml.getElementsByTagName('ReverbParameters')[0];\n"
"            }\n"
"            \n"
"            // Update main preset settings and global settings (only update if state has changed)\n"
"            updateElementValueFromXmlStates(document.getElementsByName('query')[0], 'query', SourcePresetState, OldStateSourcePresetState);\n"
"            updateElementValueFromXmlStates(document.getElementsByName('presetIdx')[0], 'presetNumber', SourcePresetState, OldStateSourcePresetState);\n"
"            updateElementValueFromXmlStates(document.getElementsByName('presetName')[0], 'presetName', SourcePresetState, OldStateSourcePresetState);\n"
"            updateElementValueFromXmlStates(document.getElementsByName('midiThru')[0], 'midiThru', GlobalSettings, OldStateGlobalSettings);\n"
"            updateElementValueFromXmlStates(document.getElementsByName('midiInChannel')[0], 'midiInChannel', GlobalSettings, OldStateGlobalSettings);\n"
"            updateElementValueFromXmlStates(document.getElementsByName('numVoices')[0], 'NumVoices', SamplerState, OldStateSamplerState);\n"
"            updateElementValueFromXmlStates(document.getElementById('0_roomSize'), 'reverb_roomSize', ReverbParameters, OldStateReverbParameters);\n"
"            updateElementValueFromXmlStates(document.getElementById('0_damping'), 'reverb_damping', ReverbParameters, OldStateReverbParameters);\n"
"            updateElementValueFromXmlStates(document.getElementById('0_wetLevel'), 'reverb_wetLevel', ReverbParameters, OldStateReverbParameters);\n"
"            updateElementValueFromXmlStates(document.getElementById('0_dryLevel'), 'reverb_dryLevel', ReverbParameters, OldStateReverbParameters);\n"
"            updateElementValueFromXmlStates(document.getElementById('0_width'), 'reverb_width', ReverbParameters, OldStateReverbParameters);\n"
"            updateElementValueFromXmlStates(document.getElementById('0_freezeMode'), 'reverb_freezeMode', ReverbParameters, OldStateReverbParameters);\n"
"            \n"
"            // Update volatile state\n"
"            var volatileStateElement = document.getElementById('volatileState');\n"
"            var VolatileState = xmlState.getElementsByTagName('VolatileState')[0];\n"
"            var html = '<div class=\"voices\">';\n"
"            if (VolatileState !== undefined){\n"
"                var voiceActivations = VolatileState.getAttribute('voiceActivations').split(',').slice(0, -1);\n"
"                var voiceSoundIdxs = VolatileState.getAttribute('voiceSoundIdxs').split(',').slice(0, -1);\n"
"                var voiceSoundPlayPosition = VolatileState.getAttribute('voiceSoundPlayPosition').split(',').slice(0, -1);\n"
"                \n"
"                for (var i=0; i<voiceSoundIdxs.length; i++){\n"
"                    if (voiceSoundIdxs[i] == \"-1\"){\n"
"                        // Draw empty square\n"
"                        html += '<div class=\"voice\"><div class=\"voice_progress\" style=\"width:0%;\">&nbsp;</div></div>'\n"
"                    } else {\n"
"                        html += '<div class=\"voice\"><div class=\"voice_progress\" style=\"width:' + 100 * parseFloat(voiceSoundPlayPosition[i], 10) + '%;\">' + voiceSoundIdxs[i] + '</div></div>'\n"
"                    }\n"
"                }\n"
"            }\n"
"            html += \"</div>\";\n"
"            volatileStateElement.innerHTML = html;\n"
" \n"
"            // Update individual sound editors\n"
"\n"
"            // Check if the sound listing has changed\n"
"            var shouldRedoCards = false;\n"
"            var soundInfoElements = xmlState.getElementsByTagName('soundInfo');\n"
"            var samplerSoundElements = xmlState.getElementsByTagName('SamplerSound');\n"
"            var OldStateSoundInfoElements, OldStateSamplerSoundElements = undefined;\n"
"\n"
"            if (lastReceivedStateXml === undefined){\n"
"                shouldRedoCards = true;\n"
"            } else {\n"
"                OldStateSoundInfoElements = lastReceivedStateXml.getElementsByTagName('soundInfo');\n"
"                OldStateSamplerSoundElements = lastReceivedStateXml.getElementsByTagName('SamplerSound');\n"
"                \n"
"                var newStateIds = \"\";\n"
"                var oldStateIds = \"\";\n"
"                for (var i=0; i<soundInfoElements.length; i++){\n"
"                    newStateIds += soundInfoElements[i].getAttribute('soundId') + ',';\n"
"                }\n"
"                for (var i=0; i<OldStateSoundInfoElements.length; i++){\n"
"                    oldStateIds += OldStateSoundInfoElements[i].getAttribute('soundId') + ',';\n"
"                }\n"
"                if (newStateIds != oldStateIds){\n"
"                    shouldRedoCards = true;\n"
"                }\n"
"            }\n"
"\n"
"            // Re-create sound cards if needed\n"
"            if (shouldRedoCards){\n"
"                var individualSoundEditorsElement = document.getElementById('individualSoundEditors');\n"
"                individualSoundEditorsElement.innerHTML = '';\n"
"                for (var i = 0; i < soundInfoElements.length; i++) {\n"
"                    var sound = soundInfoElements[i];\n"
"                    var soundCardHtml = createCardForSound(i, sound);\n"
"                    individualSoundEditorsElement.innerHTML += soundCardHtml;\n"
"                }\n"
"            }\n"
"\n"
"            // Update sound sliders if slider was not moved recently\n"
"            var slidersToUpdate = [];\n"
"            for (var i = 0; i < soundInfoElements.length; i++) {\n"
"                var samplerSound = samplerSoundElements[i];\n"
"                var samplerSoundParameters = samplerSound.getElementsByTagName('SamplerSoundParameter');\n"
"                for (var j = 0; j < samplerSoundParameters.length; j++) {\n"
"                    var parameter = samplerSoundParameters[j];\n"
"                    var name = parameter.getAttribute('parameter_name');\n"
"                    var type = parameter.getAttribute('parameter_type');\n"
"                    var rawValue = parameter.getAttribute('parameter_value');\n"
"                    if (type == \"float\"){\n"
"                        var sliderElement = document.getElementById(i + '_' + name) // Needed to get slider max value\n"
"                        var value = getProcessedSoundParameterValueExpToLin(sliderElement, parseFloat(rawValue, 10));\n"
"                        slidersToUpdate.push([i + '_' + name, value])\n"
"                    } else if (type == \"int\"){\n"
"                        slidersToUpdate.push([i + '_' + name, parseInt(rawValue, 10)])\n"
"                    }\n"
"                }\n"
"            }\n"
"            for (var i=0; i<slidersToUpdate.length; i++){\n"
"                var sliderElement = document.getElementById(slidersToUpdate[i][0]);\n"
"                if (sliderElement !== undefined){\n"
"                    var sliderLastMoved = sliderElement.getAttribute(\"data-lastMoved\");\n"
"                    if ((sliderLastMoved === undefined) || ((Date.now()/1000 - sliderLastMoved) > 0.25)){\n"
"                        // Only update sliders if they are being moved in the last 1 sec\n"
"                        sliderElement.value = slidersToUpdate[i][1];\n"
"                    }\n"
"                }\n"
"            }\n"
"            updateAllSliderLabels();\n"
"        }\n"
"\n"
"        // State handling\n"
"        function updateState(){\n"
"            var xhr = new XMLHttpRequest();\n"
"            xhr.onreadystatechange = function () {\n"
"                if (this.readyState != 4) return;\n"
"                if (this.status == 200) {\n"
"                    if (this.responseText == 'Maybe old'){\n"
"                        document.getElementById(\"errorIndicator\").innerHTML = 'Plugin appears to be offline';\n"
"                    } else {\n"
"                            document.getElementById(\"errorIndicator\").innerHTML = 'Plugin appears to be offline';\n"
"                        if (this.responseXML != undefined){\n"
"                            document.getElementById(\"errorIndicator\").innerHTML = '';\n"
"                            document.getElementById(\"state\").value = this.responseText;\n"
"                            syncUIWithState(this.responseXML);\n"
"                            lastReceivedStateText = this.responseText;\n"
"                            lastReceivedStateXml = this.responseXML;\n"
"                        }\n"
"                    }\n"
"                } else {\n"
"                    document.getElementById(\"errorIndicator\").innerHTML = 'Server appears to be offline';\n"
"                    document.getElementById(\"state\").value = '';\n"
"                }\n"
"            };\n"
"            xhr.open('GET', '/update_state', true);\n"
"            xhr.send();\n"
"        }\n"
"\n"
"        function getSystemStats(){\n"
"            var xhr = new XMLHttpRequest();\n"
"            xhr.onreadystatechange = function () {\n"
"                if (this.readyState != 4) return;\n"
"                if (this.status == 200) {\n"
"                    document.getElementById(\"systemStats\").value = this.responseText;\n"
"                }\n"
"            };\n"
"            xhr.open('GET', '/get_system_stats', true);\n"
"            xhr.send();\n"
"        }\n"
"        \n"
"    </script>\n"
"</head>\n"
"\n"
"<body>\n"
"    <h1>Source, a Freesound-powered sampler</h1>\n"
"    <span id=\"errorIndicator\"></span><br>\n"
"\n"
"    <div class=\"controls_card\">\n"
"        <b>Preset</b><br>\n"
"        Preset number:</label><input name=\"presetIdx\" value=\"\" type=\"number\">\n"
"        <button onclick=\"savePreset()\">Save</button>\n"
"        <button onclick=\"loadPreset()\">Load</button><br>\n"
"        Preset name:</label><input name=\"presetName\" value=\"\" type=\"text\">\n"
"        <button onclick=\"previousPreset()\"><<</button><button onclick=\"nextPreset()\">>></button>\n"
"    </div>\n"
"\n"
"    <div class=\"controls_card\">\n"
"        <b>Query</b><br>\n"
"        Query:<input name=\"query\" value=\"\" type=\"text\" placeholder=\"percussion\"><br>\n"
"        Num sounds:<input name=\"numSounds\" value=\"\" type=\"text\" placeholder=\"16\"><br>\n"
"        Max sound length:<input name=\"maxSoundLength\" value=\"\" type=\"text\" placeholder=\"0.5\"><br>\n"
"        <button onclick=\"makeQuery()\">Go!</button>\n"
"    </div>\n"
"\n"
"    <div class=\"controls_card\">\n"
"        <b>Reverb</b><br>\n"
"        <input type=\"range\" id=\"0_roomSize\" name=\"roomSize\" min=\"0.0\" max=\"1.0\" value=\"0.5\" step=\"0.01\" oninput=\"setReverbParameters()\">\n"
"        roomSize: <span id=\"0_roomSizeLabel\"></span><br>\n"
"        <input type=\"range\" id=\"0_damping\" name=\"damping\" min=\"0.0\" max=\"1.0\" value=\"0.5\" step=\"0.01\" oninput=\"setReverbParameters()\">\n"
"        damping: <span id=\"0_dampingLabel\"></span><br>\n"
"        <input type=\"range\" id=\"0_wetLevel\" name=\"wetLevel\" min=\"0.0\" max=\"1.0\" value=\"0.0\" step=\"0.01\" oninput=\"setReverbParameters()\">\n"
"        wetLevel: <span id=\"0_wetLevelLabel\"></span><br>\n"
"        <input type=\"range\" id=\"0_dryLevel\" name=\"dryLevel\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\" oninput=\"setReverbParameters()\">\n"
"        dryLevel: <span id=\"0_dryLevelLabel\"></span><br>\n"
"        <input type=\"range\" id=\"0_width\" name=\"width\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\" oninput=\"setReverbParameters()\">\n"
"        width: <span id=\"0_widthLabel\"></span><br>\n"
"        <input type=\"range\" id=\"0_freezeMode\" name=\"freezeMode\" min=\"0.0\" max=\"1.0\" value=\"0.0\" step=\"0.01\" oninput=\"setReverbParameters()\">\n"
"        freezeMode: <span id=\"0_freezeModeLabel\"></span>\n"
"    </div>\n"
"\n"
"    <div class=\"controls_card\">\n"
"        <b>System stats</b><br>\n"
"        <button onclick=\"getSystemStats();\">Get system stats</button>\n"
"        <textarea id=\"systemStats\" style=\"width:100%;height:100px;\"></textarea>\n"
"    </div>\n"
"\n"
"    <div class=\"controls_card\">\n"
"        <b>Global options</b><br>\n"
"        Num voices:<input name=\"numVoices\" value=\"\" type=\"number\" onchange=\"setNumVoices()\"><br>\n"
"        MIDI in channel:<input name=\"midiInChannel\" value=\"\" type=\"number\" onchange=\"setMidiInChannel()\"><br>\n"
"        MIDI thru:<input name=\"midiThru\" value=\"\" type=\"checkbox\" onchange=\"setMidiThru()\"><br>\n"
"    </div>\n"
"\n"
"    <div class=\"controls_card\">\n"
"        <b>Volatile state</b><br>\n"
"        <div id=\"volatileState\"></div>\n"
"    </div>\n"
"    \n"
"    <div class=\"cards_container_slide\">\n"
"        <div id=\"allSoundsEditor\" style=\"background-color: honeydew;\"></div>\n"
"        <div id=\"individualSoundEditors\"></div>\n"
"    </div>\n"
"\n"
"    <h3>State</h3>\n"
"    <button onclick=\"startAutoUpdate();\">Start auto update</button><button onclick=\"stopAutoUpdate();\">Stop auto update</button>\n"
"    <textarea id=\"state\" style=\"width:100%;height:500px;\"></textarea>\n"
"\n"
"</body>\n"
"</html>\n";

const char* index_html = (const char*) temp_binary_data_0;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x2c834af8:  numBytes = 29329; return index_html;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "index_html"
};

const char* originalFilenames[] =
{
    "index.html"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
    {
        if (namedResourceList[i] == resourceNameUTF8)
            return originalFilenames[i];
    }

    return nullptr;
}

}
